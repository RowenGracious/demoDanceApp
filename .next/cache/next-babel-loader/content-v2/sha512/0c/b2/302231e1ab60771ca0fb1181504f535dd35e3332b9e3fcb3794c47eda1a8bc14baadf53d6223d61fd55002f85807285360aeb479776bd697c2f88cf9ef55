{"ast":null,"code":"import Providers from 'next-auth/providers';\n\nproviders: [Providers.Credentials({\n  // The name to display on the sign in form (e.g. 'Sign in with...')\n  name: 'Credentials',\n  // The credentials is used to generate a suitable form on the sign in page.\n  // You can specify whatever fields you are expecting to be submitted.\n  // e.g. domain, username, password, 2FA token, etc.\n  credentials: {\n    username: {\n      label: \"Username\",\n      type: \"text\",\n      placeholder: \"jsmith\"\n    },\n    password: {\n      label: \"Password\",\n      type: \"password\"\n    }\n  },\n\n  async authorize(credentials) {\n    // Add logic here to look up the user from the credentials supplied\n    const user = {\n      id: 1,\n      name: 'J Smith',\n      email: 'jsmith@example.com'\n    };\n\n    if (user) {\n      // Any object returned will be saved in `user` property of the JWT\n      return user;\n    } else {\n      // If you return null or false then the credentials will be rejected\n      return null; // You can also Reject this callback with an Error or with a URL:\n      // throw new Error('error message') // Redirect to error page\n      // throw '/path/to/redirect'        // Redirect to a URL\n    }\n  }\n\n})];","map":{"version":3,"sources":["/Users/rowengracious/DroneInsurance/my-test-app/pages/api/auth/[â€¦nextauth].js"],"names":["Providers","providers","Credentials","name","credentials","username","label","type","placeholder","password","authorize","user","id","email"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,qBAAtB;;AAEAC,SAAS,EAAE,CACTD,SAAS,CAACE,WAAV,CAAsB;AACpB;AACAC,EAAAA,IAAI,EAAE,aAFc;AAGpB;AACA;AACA;AACAC,EAAAA,WAAW,EAAE;AACXC,IAAAA,QAAQ,EAAE;AAAEC,MAAAA,KAAK,EAAE,UAAT;AAAqBC,MAAAA,IAAI,EAAE,MAA3B;AAAmCC,MAAAA,WAAW,EAAE;AAAhD,KADC;AAEXC,IAAAA,QAAQ,EAAE;AAAGH,MAAAA,KAAK,EAAE,UAAV;AAAsBC,MAAAA,IAAI,EAAE;AAA5B;AAFC,GANO;;AAUpB,QAAMG,SAAN,CAAgBN,WAAhB,EAA6B;AAC3B;AACA,UAAMO,IAAI,GAAG;AAAEC,MAAAA,EAAE,EAAE,CAAN;AAAST,MAAAA,IAAI,EAAE,SAAf;AAA0BU,MAAAA,KAAK,EAAE;AAAjC,KAAb;;AAEA,QAAIF,IAAJ,EAAU;AACR;AACA,aAAOA,IAAP;AACD,KAHD,MAGO;AACL;AACA,aAAO,IAAP,CAFK,CAGL;AACA;AACA;AACD;AACF;;AAxBmB,CAAtB,CADS","sourcesContent":["import Providers from 'next-auth/providers';\n\nproviders: [\n  Providers.Credentials({\n    // The name to display on the sign in form (e.g. 'Sign in with...')\n    name: 'Credentials',\n    // The credentials is used to generate a suitable form on the sign in page.\n    // You can specify whatever fields you are expecting to be submitted.\n    // e.g. domain, username, password, 2FA token, etc.\n    credentials: {\n      username: { label: \"Username\", type: \"text\", placeholder: \"jsmith\" },\n      password: {  label: \"Password\", type: \"password\" }\n    },\n    async authorize(credentials) {\n      // Add logic here to look up the user from the credentials supplied\n      const user = { id: 1, name: 'J Smith', email: 'jsmith@example.com' }\n\n      if (user) {\n        // Any object returned will be saved in `user` property of the JWT\n        return user\n      } else {\n        // If you return null or false then the credentials will be rejected\n        return null\n        // You can also Reject this callback with an Error or with a URL:\n        // throw new Error('error message') // Redirect to error page\n        // throw '/path/to/redirect'        // Redirect to a URL\n      }\n    }\n  })\n]"]},"metadata":{},"sourceType":"module"}