{"ast":null,"code":"\"use strict\";\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports.RouteAnnouncer = RouteAnnouncer;\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _router = require(\"./router\");\n\nfunction RouteAnnouncer() {\n  var _ref = (0, _router.useRouter)(),\n      asPath = _ref.asPath;\n\n  var _ref2 = (0, _react.useState)(''),\n      _ref3 = _slicedToArray(_ref2, 2),\n      routeAnnouncement = _ref3[0],\n      setRouteAnnouncement = _ref3[1]; // Only announce the path change, but not for the first load because screen reader will do that automatically.\n\n\n  var initialPathLoaded = (0, _react.useRef)(false); // Every time the path changes, announce the route change. The announcement will be prioritized by h1, then title\n  // (from metadata), and finally if those don't exist, then the pathName that is in the URL. This methodology is\n  // inspired by Marcy Sutton's accessible client routing user testing. More information can be found here:\n  // https://www.gatsbyjs.com/blog/2019-07-11-user-testing-accessible-client-routing/\n\n  (0, _react.useEffect)(function () {\n    if (!initialPathLoaded.current) {\n      initialPathLoaded.current = true;\n      return;\n    }\n\n    var newRouteAnnouncement;\n    var pageHeader = document.querySelector('h1');\n\n    if (pageHeader) {\n      newRouteAnnouncement = pageHeader.innerText || pageHeader.textContent;\n    }\n\n    if (!newRouteAnnouncement) {\n      if (document.title) {\n        newRouteAnnouncement = document.title;\n      } else {\n        newRouteAnnouncement = asPath;\n      }\n    }\n\n    setRouteAnnouncement(newRouteAnnouncement);\n  }, // TODO: switch to pathname + query object of dynamic route requirements\n  [asPath]);\n  return /*#__PURE__*/_react[\"default\"].createElement(\"p\", {\n    \"aria-live\": \"assertive\" // Make the announcement immediately.\n    ,\n    id: \"__next-route-announcer__\",\n    role: \"alert\",\n    style: {\n      border: 0,\n      clip: 'rect(0 0 0 0)',\n      height: '1px',\n      margin: '-1px',\n      overflow: 'hidden',\n      padding: 0,\n      position: 'absolute',\n      width: '1px',\n      // https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe\n      whiteSpace: 'nowrap',\n      wordWrap: 'normal'\n    }\n  }, routeAnnouncement);\n}\n\nvar _default = RouteAnnouncer;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}