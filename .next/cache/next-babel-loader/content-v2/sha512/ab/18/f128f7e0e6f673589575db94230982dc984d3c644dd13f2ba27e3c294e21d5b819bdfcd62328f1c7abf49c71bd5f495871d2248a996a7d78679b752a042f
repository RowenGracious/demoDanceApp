{"ast":null,"code":"\"use strict\";\n\nvar _s2 = $RefreshSig$();\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports.Portal = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactDom = require(\"react-dom\");\n\nvar Portal = function Portal(_ref) {\n  _s2();\n\n  var children = _ref.children,\n      type = _ref.type;\n  var portalNode = React.useRef(null);\n\n  var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      forceUpdate = _React$useState2[1];\n\n  React.useEffect(function () {\n    portalNode.current = document.createElement(type);\n    document.body.appendChild(portalNode.current);\n    forceUpdate({});\n    return function () {\n      if (portalNode.current) {\n        document.body.removeChild(portalNode.current);\n      }\n    };\n  }, [type]);\n  return portalNode.current ? /*#__PURE__*/(0, _reactDom.createPortal)(children, portalNode.current) : null;\n};\n\n_s2(Portal, \"H9Jq/p5GRHpyHVgd55qLy9aYECA=\");\n\n_c = Portal;\nexports.Portal = Portal;\n\nvar _c;\n\n$RefreshReg$(_c, \"Portal\");","map":{"version":3,"sources":["../../../client/portal/index.tsx"],"names":["Portal","portalNode","React","document","forceUpdate"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AAOO,IAAMA,MAA6B,GAAG,SAAhCA,MAAgC,OAAwB;AAAA;;AAAA,MAAvB,QAAuB,QAAvB,QAAuB;AAAA,MAAxB,IAAwB,QAAxB,IAAwB;AACnE,MAAIC,UAAU,GAAGC,KAAK,CAALA,MAAAA,CAAjB,IAAiBA,CAAjB;;AACA,wBAAsBA,KAAK,CAA3B,QAAsBA,EAAtB;AAAA;AAAA,MAAI,WAAJ;;AACAA,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpBD,IAAAA,UAAU,CAAVA,OAAAA,GAAqBE,QAAQ,CAARA,aAAAA,CAArBF,IAAqBE,CAArBF;AACAE,IAAAA,QAAQ,CAARA,IAAAA,CAAAA,WAAAA,CAA0BF,UAAU,CAApCE,OAAAA;AACAC,IAAAA,WAAW,CAAXA,EAAW,CAAXA;AACA,WAAO,YAAM;AACX,UAAIH,UAAU,CAAd,OAAA,EAAwB;AACtBE,QAAAA,QAAQ,CAARA,IAAAA,CAAAA,WAAAA,CAA0BF,UAAU,CAApCE,OAAAA;AAEH;AAJD,KAAA;AAJFD,GAAAA,EASG,CATHA,IASG,CATHA;AAWA,SAAOD,UAAU,CAAVA,OAAAA,GAAAA,aAAqB,CAAA,GAAA,SAAA,CAAA,YAAA,EAAA,QAAA,EAAuBA,UAAU,CAAtDA,OAAqB,CAArBA,GAAP,IAAA;AAdK,CAAA;;IAAMD,M;;KAAAA,M","sourcesContent":["import * as React from 'react'\nimport { createPortal } from 'react-dom'\n\ntype PortalProps = {\n  children: React.ReactNode\n  type: string\n}\n\nexport const Portal: React.FC<PortalProps> = ({ children, type }) => {\n  let portalNode = React.useRef<HTMLElement | null>(null)\n  let [, forceUpdate] = React.useState<{}>()\n  React.useEffect(() => {\n    portalNode.current = document.createElement(type)\n    document.body.appendChild(portalNode.current)\n    forceUpdate({})\n    return () => {\n      if (portalNode.current) {\n        document.body.removeChild(portalNode.current)\n      }\n    }\n  }, [type])\n\n  return portalNode.current ? createPortal(children, portalNode.current) : null\n}\n"]},"metadata":{},"sourceType":"script"}