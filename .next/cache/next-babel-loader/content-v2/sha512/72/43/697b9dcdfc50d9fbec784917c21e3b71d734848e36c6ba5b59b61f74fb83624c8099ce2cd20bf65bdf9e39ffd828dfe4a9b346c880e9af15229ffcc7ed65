{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/rowengracious/DroneInsurance/my-test-app/src/components/common/InputText/InputText.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { useFormContext } from 'react-hook-form';\n\nconst InputText = ({\n  type,\n  label,\n  name\n}) => {\n  const methods = useFormContext();\n  const {\n    register,\n    formState: {\n      errors\n    }\n  } = methods;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: name,\n      children: [\" \", label, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", _objectSpread({\n      id: name,\n      name: name,\n      type: type\n    }, register(name, {\n      required: \"required\",\n      pattern: {\n        value: /\\S+@\\S+.\\S+/,\n        message: \"Entered value does not match email format\"\n      }\n    })), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this), errors.email && /*#__PURE__*/_jsxDEV(\"span\", {\n      role: \"alert\",\n      children: errors.email.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n};\n\nexport default InputText;","map":{"version":3,"sources":["/Users/rowengracious/DroneInsurance/my-test-app/src/components/common/InputText/InputText.js"],"names":["React","useFormContext","InputText","type","label","name","methods","register","formState","errors","required","pattern","value","message","email"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,QAA+B,iBAA/B;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAACC,EAAAA,IAAD;AAAOC,EAAAA,KAAP;AAAcC,EAAAA;AAAd,CAAD,KAAyB;AACzC,QAAMC,OAAO,GAAGL,cAAc,EAA9B;AACA,QAAM;AAAEM,IAAAA,QAAF;AAAYC,IAAAA,SAAS,EAAE;AAAEC,MAAAA;AAAF;AAAvB,MAAsCH,OAA5C;AAEA,sBACE;AAAA,4BACE;AAAO,MAAA,OAAO,EAAED,IAAhB;AAAA,sBAAwBD,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AACE,MAAA,EAAE,EAAEC,IADN;AAEE,MAAA,IAAI,EAAEA,IAFR;AAGE,MAAA,IAAI,EAAEF;AAHR,OAIMI,QAAQ,CAACF,IAAD,EAAO;AACjBK,MAAAA,QAAQ,EAAE,UADO;AAEjBC,MAAAA,OAAO,EAAE;AACPC,QAAAA,KAAK,EAAE,aADA;AAEPC,QAAAA,OAAO,EAAE;AAFF;AAFQ,KAAP,CAJd;AAAA;AAAA;AAAA;AAAA,YAFF,EAcGJ,MAAM,CAACK,KAAP,iBAAgB;AAAM,MAAA,IAAI,EAAC,OAAX;AAAA,gBAAoBL,MAAM,CAACK,KAAP,CAAaD;AAAjC;AAAA;AAAA;AAAA;AAAA,YAdnB;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD,CAtBD;;AAwBA,eAAeX,SAAf","sourcesContent":["import React from 'react';\nimport { useFormContext } from 'react-hook-form';\n\nconst InputText = ({type, label, name}) => {\n  const methods = useFormContext();\n  const { register, formState: { errors } } = methods;\n\n  return (\n    <div>\n      <label htmlFor={name}> {label} </label>\n      <input \n        id={name} \n        name={name} \n        type={type}\n        {...register(name, {\n          required: \"required\",\n          pattern: {\n            value: /\\S+@\\S+.\\S+/,\n            message: \"Entered value does not match email format\"\n          }\n        })}\n      />\n      {errors.email && <span role=\"alert\">{errors.email.message}</span>}\n    </div>\n  )\n}\n\nexport default InputText\n"]},"metadata":{},"sourceType":"module"}